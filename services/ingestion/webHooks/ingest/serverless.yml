service: ingest

custom:
  project: dataplattform
  stage: ${opt:stage, self:provider.stage}
  service: ${self:custom.stage}-${self:service} #this service definition includes stage
  datalakeArn:
    'Fn::ImportValue': ${self:custom.stage}-datalake-datalakeArn

provider:
  name: aws
  stage: dev
  region: eu-central-1
  stackName: ${self:custom.service}
  deploymentBucket:
    name: dataplattform-v2-deploymentbucket
  runtime: python3.7
  memorySize: 1024
  timeout: 5

  #either generate keys here by uncommenting the following code, or put it directly in to api gateway from config
#  apiKeys:
#    - name: ${self:custom.stage}-mainIngestKey #when value is not set, AWS automatically generates API key

  #imports api gateway resources exported by ingestApiGateway service
  apiGateway:
    restApiId:
      'Fn::ImportValue': ${self:custom.stage}-ingestApiGateway-restApiId
    restApiRootResourceId:
      'Fn::ImportValue': ${self:custom.stage}-ingestApiGateway-rootResourceId

  tags:
    project: ${self:custom.project}
    layer: ingestion
    ingestion: webHooks
  stackTags:
    project: ${self:custom.project}
    layer: ingestion
    ingestion: webHooks

package:
  individually: true
  exclude:
    - "./**"

functions:
  mainIngest: # logical id
    module: src/main_ingest
    handler: main_ingest.handler
    name: ${self:custom.service}-mainIngest # physical id
    description: main ingest lambda
    role: mainIngestRole

    package:
      include:
        - 'src/main_ingest/*.py' # Files to include in deployment

    environment:
      DATA_LAKE: ${self:custom.stage}-datalake-datalake

    events:
      - http:
          path: ingest/{type}
          method: post
          private: true #if true API key is needed

resources:
  Resources:
    #different roles go here
    mainIngestRole: # logical id
      Type: AWS::IAM::Role
      Properties:
        RoleName: mainIngestRole # required if you want to use 'serverless deploy --function' later on

        # Assume role policy document defines which entities can assume the role. (can be AWS accounts, IAM users, AWS services and other)
        # Define the the trust policy that is associated with this role.
        AssumeRolePolicyDocument:
          Version: '2012-10-17' # the current version of the policy language (defaults to '2008-10-17' if not set)
          Statement: # main element for a policy
            - Effect: Allow # required and specifies whether the statement results is an allow or an explicit deny
              Principal: # principal is the entity that is allowed or denied access
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole # sts(Security Token Service)

        ManagedPolicyArns: # a list of arns(amazon resource names) of the IAM managed policies that you want to attach to the user
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole' # Gives permission to upload logs to CloudWatch

        #define the policy for allowing it to put things into s3
        Policies:
          - PolicyName: ${self:custom.service}-DatalakeWritePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    -
                  Resource:
                    !Join ['', ['${self:custom.datalakeArn}' ,'/data/*']] #puts on '/*' prefix to arn which is needed for putobject permission

        #fortsett her
        #TODO

plugins:
  - serverless-python-requirements
